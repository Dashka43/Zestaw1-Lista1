#include "pch.h"
#include <iostream>
#include<list>
using namespace std; 
using position_t = int;      // int dla implementacji tablicowej i kursorowej

constexpr size_t capacity = 40;
template <typename T>
class SortedList {
private:
	T *p;
   size_t s;
   using position_t = int;
public:
    SortedList (T arr[], size_t s);

	void print();
	void push(T x);
	T pop();
	int size();
	void remove(T x);
	void unique();
	T erase(position_t i);
	T erase1(position_t i);
	position_t find(T x);

	static SortedList merge( SortedList a,  SortedList b);
};

template <typename T>
SortedList<T>::SortedList(T arr[], size_t s) {
	p = new T[capacity];
	this->s= s;
	for (int i = 0; i<s; i++)
	{
		p[i] = arr[i];
	}
}



template <typename T>
void SortedList<T>::print() {
	for (int i = 0; i<s; i++)
		cout << " " << *(p + i) ;
	cout << endl;
}
template <typename T>
void SortedList<T>::push( T x)  // Wstawia element 'x'
{	
	p[s] = x;
	int j = s;
	while(p[j]<p[j-1])
	{
		T k= p[j];
		p[j] = p[j - 1];
		p[j - 1] = k;
		j--;
	}
	s++;
}
template <typename T>
T SortedList<T>::pop() // Zwraca i usuwa pierwszy (najmniejszy) element
{
	T k = p[0];
	for (int i = 0; i < s; i++)
	{
		p[i] = p[i + 1];
	}
	s--;
		return k;
	
};
template <typename T>
int SortedList<T>::size()// Zwraca liczbę elementów w liście
{
	return s;
}
template <typename T>
void SortedList<T>::remove(T x)// Usuwa wszystkie elementy równe 'x'
{
	int j = s-1; 
	//cout << j << " ETO JA" << endl;
	while ((p[j] >= x) && (j >-1 ))
	{
		
		if (p[j] == x)
		{
			for (int i = j; i < s; i++)
			{
				//cout <<"index   "<< j << "element   " << p[j] <<  endl;
				p[i] = p[i + 1];
			}
			
			s--;
		}
		j--;
		
	}
}
template <typename T>
void SortedList<T>::unique()// Usuwa sąsiadujące duplikaty
{
	int j = s - 1;
	while(j>0)
	{
		if (p[j] == p[j - 1])
		{
			for (int i = j; i < s; i++)
			{
				//cout <<"index   "<< j << "element   " << p[j] <<  endl;
				p[i] = p[i + 1];
			}
			s--;
		}
		j--;

	}

}
template <typename T>
T SortedList<T>::erase(position_t i) 
{
	T k = p[i];
	for (int j = i; j < s; j++)
	{
		p[j] = p[j + 1];
	}
	s--;
	//cout << "POZICIA" << endl;
		return k;
}
template <typename T>
T SortedList<T>::erase1(position_t i)
{
	T k = p[i];
	//cout << "POZICIA" << endl;
	return k;
}
template <typename T>
position_t SortedList<T>::find(T i) // Zwraca pozycję elementu o wartości 'x' lub -1 gdy nie znaleziono
{
	int j = 0;
	while ((p[j] != i) && (j < s))
	{
		j++;
	}
	if (p[j] == i)  return j; 
	else 
		return -1;
}
template <typename T>
 SortedList<T> SortedList<T>::merge( SortedList a,  SortedList b) {
	 T* t = new T[a.size() + b.size()];
	 int i = 0, j = 0, k = 0;
	 while (i < a.size() && j < b.size())
	 {
		 if (a.erase1(i) <= b.erase1(j))
		 { 
			 t[k] = a.erase1(i);
			 i++;
			 k++;
		 }
		 else
		 {
			 t[k] = b.erase1(j);
			 j++;
			 k++;
		 }
	 }
	if (i< a.size())
	 {
		 for (int ii = i; ii < a.size(); ii++)
		 {
			 t[k] = a.erase1(ii);
			 k++;
		 }

	 }
	 if (j < b.size())
	 {
		 for (int ii = j; ii < b.size(); ii++)
		 {
			 t[k] = b.erase1(ii);
			 k++;
		 }

	 }

	 return SortedList<T>(t, a.size() + b.size());
	
 };
            



int main() {
	int arr[5] = { 2, 2, 3, 5, 6 };
	int ar1[6] = { 1, 4, 5, 5, 6, 7 };
	
	SortedList <int> a(arr, 5);
	SortedList <int> b(ar1, 6);
	SortedList<int> ar2 = SortedList<int>::merge(a, b);
	ar2.print();
	a.print();
	b.print();
	int k = 3;
	int k1 = 1;
	a.push(k);
	//a.push(k1);
	a.print();
	//cout << a.pop()<< endl;
	//a.print();
	//cout << a.size() << endl;
	//k1 = 1;
	//a.push(k1);
	//a.print();
	//cout << a.size() << endl;
	//k1 = 5;
	//a.remove(k1);
	//a.print();
	//a.unique();
	//a.print();
	//cout << a.erase(3) << endl;
	//a.print();
	//cout << a.find(2) << endl;
	//a.print();



	return 0;
}
